name: gETH midrate daily

permissions:
  contents: write

on:
  schedule:
    # JST 09:00 = UTC 00:00
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  log:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm install

      - name: Run logger (single shot)
        run: node index.mjs --interval 0 --out data/geth_mid.csv
        env:
          BASE_RPC_URL: ${{ secrets.BASE_RPC_URL }}

      - name: Append to monthly CSV
        run: |
          set -e
          month=$(date -u +"%Y-%m")
          mkdir -p data
          if [ ! -f "data/geth_mid_${month}.csv" ]; then
            cp data/geth_mid.csv "data/geth_mid_${month}.csv"
          else
            tail -n +2 data/geth_mid.csv >> "data/geth_mid_${month}.csv"
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: pip install pandas matplotlib

      - name: Make charts
        run: |
          python - <<'PY'
          import glob, pandas as pd, matplotlib.pyplot as plt
          from matplotlib.ticker import ScalarFormatter
          import os
          os.makedirs("charts", exist_ok=True)

          files = sorted(glob.glob("data/geth_mid_*.csv"))
          if not files:
            raise SystemExit("no monthly csvs found")

          df = pd.concat([pd.read_csv(f) for f in files], ignore_index=True)
          df['timestamp_iso'] = pd.to_datetime(df['timestamp_iso'])
          df = df.sort_values('timestamp_iso')

          # 1) NAV (WETH per gETH) —— オフセット&科学表記OFF
          fig, ax = plt.subplots(figsize=(8,4))
          y = df['weth_per_geth_mid']
          ax.plot(df['timestamp_iso'], y)
          ax.set_title('gETH NAV (WETH per gETH)')
          ax.set_xlabel('time'); ax.set_ylabel('WETH/gETH'); ax.grid(True, alpha=0.3)

          fmt = ScalarFormatter(useOffset=False, useMathText=False)
          fmt.set_scientific(False)
          ax.yaxis.set_major_formatter(fmt)

          lo, hi = y.min(), y.max()
          pad = max((hi - lo) * 3, 0.0005)
          ax.set_ylim(max(0.9, lo - pad), min(1.1, hi + pad))

          fig.tight_layout(); fig.savefig('charts/geth_nav.png', dpi=160)

          # 2) Premium vs ETH (%)
          prem = (1.0 / y - 1.0) * 100.0
          fig, ax = plt.subplots(figsize=(8,4))
          ax.plot(df['timestamp_iso'], prem)
          ax.set_title('gETH Premium vs ETH (%)')
          ax.set_xlabel('time'); ax.set_ylabel('%')
          ax.axhline(0, linestyle='--', linewidth=1)
          ax.grid(True, alpha=0.3)
          fig.tight_layout(); fig.savefig('charts/geth_premium.png', dpi=160)

          # 3) gETH / WETH（直感用）
          ratio = 1.0 / y
          fig, ax = plt.subplots(figsize=(8,4))
          ax.plot(df['timestamp_iso'], ratio)
          ax.set_title('gETH / WETH')
          ax.set_xlabel('time'); ax.set_ylabel('gETH/WETH'); ax.grid(True, alpha=0.3)

          fmt2 = ScalarFormatter(useOffset=False, useMathText=False)
          fmt2.set_scientific(False)
          ax.yaxis.set_major_formatter(fmt2)

          rlo, rhi = ratio.min(), ratio.max()
          rpad = max((rhi - rlo) * 3, 0.0005)
          ax.set_ylim(max(0.95, rlo - rpad), min(1.05, rhi + rpad))

          fig.tight_layout(); fig.savefig('charts/geth_ratio.png', dpi=160)
          PY

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: charts_${{ github.run_id }}
          path: |
            data/geth_mid_*.csv
            charts/*.png
          retention-days: 30
